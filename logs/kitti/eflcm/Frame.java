/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package eflcm;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class Frame implements lcm.lcm.LCMEncodable
{
    public boolean trackOnly;
    public boolean compressed;
    public boolean last;
    public int depthSize;
    public int imageSize;
    public byte depth[];
    public byte image[];
    public long timestamp;
    public int frameNumber;
    public String senderName;
 
    public Frame()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4fb1058a78c4a44bL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(eflcm.Frame.class))
            return 0L;
 
        classes.add(eflcm.Frame.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeByte( this.trackOnly ? 1 : 0); 
 
        outs.writeByte( this.compressed ? 1 : 0); 
 
        outs.writeByte( this.last ? 1 : 0); 
 
        outs.writeInt(this.depthSize); 
 
        outs.writeInt(this.imageSize); 
 
        if (this.depthSize > 0)
            outs.write(this.depth, 0, depthSize);
 
        if (this.imageSize > 0)
            outs.write(this.image, 0, imageSize);
 
        outs.writeLong(this.timestamp); 
 
        outs.writeInt(this.frameNumber); 
 
        __strbuf = new char[this.senderName.length()]; this.senderName.getChars(0, this.senderName.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public Frame(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public Frame(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static eflcm.Frame _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        eflcm.Frame o = new eflcm.Frame();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.trackOnly = ins.readByte()!=0;
 
        this.compressed = ins.readByte()!=0;
 
        this.last = ins.readByte()!=0;
 
        this.depthSize = ins.readInt();
 
        this.imageSize = ins.readInt();
 
        this.depth = new byte[(int) depthSize];
        ins.readFully(this.depth, 0, depthSize); 
        this.image = new byte[(int) imageSize];
        ins.readFully(this.image, 0, imageSize); 
        this.timestamp = ins.readLong();
 
        this.frameNumber = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.senderName = new String(__strbuf);
 
    }
 
    public eflcm.Frame copy()
    {
        eflcm.Frame outobj = new eflcm.Frame();
        outobj.trackOnly = this.trackOnly;
 
        outobj.compressed = this.compressed;
 
        outobj.last = this.last;
 
        outobj.depthSize = this.depthSize;
 
        outobj.imageSize = this.imageSize;
 
        outobj.depth = new byte[(int) depthSize];
        if (this.depthSize > 0)
            System.arraycopy(this.depth, 0, outobj.depth, 0, this.depthSize); 
        outobj.image = new byte[(int) imageSize];
        if (this.imageSize > 0)
            System.arraycopy(this.image, 0, outobj.image, 0, this.imageSize); 
        outobj.timestamp = this.timestamp;
 
        outobj.frameNumber = this.frameNumber;
 
        outobj.senderName = this.senderName;
 
        return outobj;
    }
 
}

