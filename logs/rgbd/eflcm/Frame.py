"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class Frame(object):
    __slots__ = ["trackOnly", "compressed", "last", "depthSize", "imageSize", "depth", "image", "timestamp", "frameNumber", "senderName"]

    def __init__(self):
        self.trackOnly = False
        self.compressed = False
        self.last = False
        self.depthSize = 0
        self.imageSize = 0
        self.depth = ""
        self.image = ""
        self.timestamp = 0
        self.frameNumber = 0
        self.senderName = ""

    def encode(self):
        buf = BytesIO()
        buf.write(Frame._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbbii", self.trackOnly, self.compressed, self.last, self.depthSize, self.imageSize))
        buf.write(bytearray(self.depth[:self.depthSize]))
        buf.write(bytearray(self.image[:self.imageSize]))
        buf.write(struct.pack(">qi", self.timestamp, self.frameNumber))
        __senderName_encoded = self.senderName.encode('utf-8')
        buf.write(struct.pack('>I', len(__senderName_encoded)+1))
        buf.write(__senderName_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != Frame._get_packed_fingerprint():
            raise ValueError("Decode error")
        return Frame._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = Frame()
        self.trackOnly = bool(struct.unpack('b', buf.read(1))[0])
        self.compressed = bool(struct.unpack('b', buf.read(1))[0])
        self.last = bool(struct.unpack('b', buf.read(1))[0])
        self.depthSize, self.imageSize = struct.unpack(">ii", buf.read(8))
        self.depth = buf.read(self.depthSize)
        self.image = buf.read(self.imageSize)
        self.timestamp, self.frameNumber = struct.unpack(">qi", buf.read(12))
        __senderName_len = struct.unpack('>I', buf.read(4))[0]
        self.senderName = buf.read(__senderName_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if Frame in parents: return 0
        tmphash = (0x4fb1058a78c4a44b) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if Frame._packed_fingerprint is None:
            Frame._packed_fingerprint = struct.pack(">Q", Frame._get_hash_recursive([]))
        return Frame._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

